# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:12:59+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class ApplianceCluster(BaseModel):
    resourceLink: Optional[str] = Field(
        None,
        description='Immutable. Self-link of the GCP resource for the Appliance Cluster. For example: //transferappliance.googleapis.com/projects/my-project/locations/us-west1-a/appliances/my-appliance',
    )


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class Authority(BaseModel):
    identityProvider: Optional[str] = Field(
        None,
        description='Output only. An identity provider that reflects the `issuer` in the workload identity pool.',
    )
    issuer: Optional[str] = Field(
        None,
        description='Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://` and be a valid URL with length <2000 characters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer. Clearing `issuer` disables Workload Identity. `issuer` cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).',
    )
    oidcJwks: Optional[str] = Field(
        None,
        description='Optional. OIDC verification keys for this Membership in JWKS format (RFC 7517). When this field is set, OIDC discovery will NOT be performed on `issuer`, and instead OIDC tokens will be validated using this field.',
    )
    workloadIdentityPool: Optional[str] = Field(
        None,
        description='Output only. The name of the workload identity pool in which `issuer` will be recognized. There is a single Workload Identity Pool per Hub that is shared between all Memberships that belong to that Hub. For a Hub hosted in {PROJECT_ID}, the workload pool format is `{PROJECT_ID}.hub.id.goog`, although this is subject to change in newer versions of this API.',
    )


class CancelOperationRequest(BaseModel):
    pass


class EdgeCluster(BaseModel):
    resourceLink: Optional[str] = Field(
        None,
        description='Immutable. Self-link of the GCP resource for the Edge Cluster. For example: //edgecontainer.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster',
    )


class Empty(BaseModel):
    pass


class Expr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class GenerateExclusivityManifestResponse(BaseModel):
    crManifest: Optional[str] = Field(
        None,
        description='The YAML manifest of the membership CR to apply if a new version of the CR is available. Empty if no update needs to be applied.',
    )
    crdManifest: Optional[str] = Field(
        None,
        description='The YAML manifest of the membership CRD to apply if a newer version of the CRD is available. Empty if no update needs to be applied.',
    )


class GkeCluster(BaseModel):
    clusterMissing: Optional[bool] = Field(
        None,
        description='Output only. If cluster_missing is set then it denotes that the GKE cluster no longer exists in the GKE Control Plane.',
    )
    resourceLink: Optional[str] = Field(
        None,
        description='Immutable. Self-link of the GCP resource for the GKE cluster. For example: //container.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster Zonal clusters are also supported.',
    )


class GoogleRpcStatus(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class KubernetesMetadata(BaseModel):
    kubernetesApiServerVersion: Optional[str] = Field(
        None,
        description="Output only. Kubernetes API server version string as reported by '/version'.",
    )
    memoryMb: Optional[int] = Field(
        None,
        description='Output only. The total memory capacity as reported by the sum of all Kubernetes nodes resources, defined in MB.',
    )
    nodeCount: Optional[int] = Field(
        None,
        description='Output only. Node count as reported by Kubernetes nodes resources.',
    )
    nodeProviderId: Optional[str] = Field(
        None,
        description='Output only. Node providerID as reported by the first node in the list of nodes on the Kubernetes endpoint. On Kubernetes platforms that support zero-node clusters (like GKE-on-GCP), the node_count will be zero and the node_provider_id will be empty.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The time at which these details were last updated. This update_time is different from the Membership-level update_time since EndpointDetails are updated internally for API consumers.',
    )
    vcpuCount: Optional[int] = Field(
        None,
        description='Output only. vCPU count as reported by Kubernetes nodes resources.',
    )


class Location(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The friendly name for this location, typically a nearby city name. For example, "Tokyo".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}',
    )
    locationId: Optional[str] = Field(
        None,
        description='The canonical id for this location. For example: `"us-east1"`.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata. For example the available capacity at the given location.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`',
    )


class InfrastructureType(Enum):
    INFRASTRUCTURE_TYPE_UNSPECIFIED = 'INFRASTRUCTURE_TYPE_UNSPECIFIED'
    ON_PREM = 'ON_PREM'
    MULTI_CLOUD = 'MULTI_CLOUD'


class Code(Enum):
    CODE_UNSPECIFIED = 'CODE_UNSPECIFIED'
    CREATING = 'CREATING'
    READY = 'READY'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'
    SERVICE_UPDATING = 'SERVICE_UPDATING'


class MembershipState(BaseModel):
    code: Optional[Code] = Field(
        None, description='Output only. The current state of the Membership resource.'
    )
    description: Optional[str] = Field(
        None, description='This field is never set by the Hub Service.'
    )
    updateTime: Optional[str] = Field(
        None, description='This field is never set by the Hub Service.'
    )


class MonitoringConfig(BaseModel):
    cluster: Optional[str] = Field(
        None,
        description='Immutable. Cluster name used to report metrics. For Anthos on VMWare/Baremetal, it would be in format `memberClusters/cluster_name`; And for Anthos on MultiCloud, it would be in format `{azureClusters, awsClusters}/cluster_name`.',
    )
    clusterHash: Optional[str] = Field(
        None,
        description='Immutable. Cluster hash, this is a unique string generated by google code, which does not contain any PII, which we can use to reference the cluster. This is expected to be created by the monitoring stack and persisted into the Cluster object as well as to GKE-Hub.',
    )
    kubernetesMetricsPrefix: Optional[str] = Field(
        None,
        description='Kubernetes system metrics, if available, are written to this prefix. This defaults to kubernetes.io for GKE, and kubernetes.io/anthos for Anthos eventually. Noted: Anthos MultiCloud will have kubernetes.io prefix today but will migration to be under kubernetes.io/anthos',
    )
    location: Optional[str] = Field(
        None, description='Immutable. Location used to report Metrics'
    )
    projectId: Optional[str] = Field(
        None, description='Immutable. Project used to report Metrics'
    )


class MultiCloudCluster(BaseModel):
    clusterMissing: Optional[bool] = Field(
        None,
        description='Output only. If cluster_missing is set then it denotes that API(gkemulticloud.googleapis.com) resource for this GKE Multi-Cloud cluster no longer exists.',
    )
    resourceLink: Optional[str] = Field(
        None,
        description='Immutable. Self-link of the GCP resource for the GKE Multi-Cloud cluster. For example: //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/awsClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/azureClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/attachedClusters/my-cluster',
    )


class ClusterType(Enum):
    CLUSTERTYPE_UNSPECIFIED = 'CLUSTERTYPE_UNSPECIFIED'
    BOOTSTRAP = 'BOOTSTRAP'
    HYBRID = 'HYBRID'
    STANDALONE = 'STANDALONE'
    USER = 'USER'


class OnPremCluster(BaseModel):
    adminCluster: Optional[bool] = Field(
        None, description='Immutable. Whether the cluster is an admin cluster.'
    )
    clusterMissing: Optional[bool] = Field(
        None,
        description='Output only. If cluster_missing is set then it denotes that API(gkeonprem.googleapis.com) resource for this GKE On-Prem cluster no longer exists.',
    )
    clusterType: Optional[ClusterType] = Field(
        None, description="Immutable. The on prem cluster's type."
    )
    resourceLink: Optional[str] = Field(
        None,
        description='Immutable. Self-link of the GCP resource for the GKE On-Prem cluster. For example: //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/vmwareClusters/my-cluster //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/bareMetalClusters/my-cluster',
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[GoogleRpcStatus] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class OperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    cancelRequested: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    statusDetail: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class ResourceManifest(BaseModel):
    clusterScoped: Optional[bool] = Field(
        None,
        description='Whether the resource provided in the manifest is `cluster_scoped`. If unset, the manifest is assumed to be namespace scoped. This field is used for REST mapping when applying the resource in a cluster.',
    )
    manifest: Optional[str] = Field(None, description='YAML manifest of the resource.')


class ResourceOptions(BaseModel):
    connectVersion: Optional[str] = Field(
        None,
        description='Optional. The Connect agent version to use for connect_resources. Defaults to the latest GKE Connect version. The version must be a currently supported version, obsolete versions will be rejected.',
    )
    k8sVersion: Optional[str] = Field(
        None,
        description='Optional. Major version of the Kubernetes cluster. This is only used to determine which version to use for the CustomResourceDefinition resources, `apiextensions/v1beta1` or`apiextensions/v1`.',
    )
    v1beta1Crd: Optional[bool] = Field(
        None,
        description='Optional. Use `apiextensions/v1beta1` instead of `apiextensions/v1` for CustomResourceDefinition resources. This option should be set for clusters with Kubernetes apiserver versions <1.16.',
    )


class TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class TypeMeta(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='APIVersion of the resource (e.g. v1).'
    )
    kind: Optional[str] = Field(
        None, description='Kind of the resource (e.g. Deployment).'
    )


class ValidateExclusivityResponse(BaseModel):
    status: Optional[GoogleRpcStatus] = Field(
        None,
        description='The validation result. * `OK` means that exclusivity is validated, assuming the manifest produced by GenerateExclusivityManifest is successfully applied. * `ALREADY_EXISTS` means that the Membership CRD is already owned by another Hub. See `status.message` for more information.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.',
    )


class Binding(BaseModel):
    condition: Optional[Expr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class ConnectAgentResource(BaseModel):
    manifest: Optional[str] = Field(None, description='YAML manifest of the resource.')
    type: Optional[TypeMeta] = Field(
        None, description='Kubernetes type of the resource.'
    )


class GenerateConnectManifestResponse(BaseModel):
    manifest: Optional[List[ConnectAgentResource]] = Field(
        None,
        description='The ordered list of Kubernetes resources that need to be applied to the cluster for GKE Connect agent installation/upgrade.',
    )


class KubernetesResource(BaseModel):
    connectResources: Optional[List[ResourceManifest]] = Field(
        None,
        description='Output only. The Kubernetes resources for installing the GKE Connect agent This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.',
    )
    membershipCrManifest: Optional[str] = Field(
        None,
        description='Input only. The YAML representation of the Membership CR. This field is ignored for GKE clusters where Hub can read the CR directly. Callers should provide the CR that is currently present in the cluster during CreateMembership or UpdateMembership, or leave this field empty if none exists. The CR manifest is used to validate the cluster has not been registered with another Membership.',
    )
    membershipResources: Optional[List[ResourceManifest]] = Field(
        None,
        description='Output only. Additional Kubernetes resources that need to be applied to the cluster after Membership creation, and after every update. This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.',
    )
    resourceOptions: Optional[ResourceOptions] = Field(
        None, description='Optional. Options for Kubernetes resource generation.'
    )


class ListLocationsResponse(BaseModel):
    locations: Optional[List[Location]] = Field(
        None,
        description='A list of locations that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )


class ListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[Operation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


class MembershipEndpoint(BaseModel):
    applianceCluster: Optional[ApplianceCluster] = Field(
        None,
        description='Optional. Specific information for a GDC Edge Appliance cluster.',
    )
    edgeCluster: Optional[EdgeCluster] = Field(
        None, description='Optional. Specific information for a Google Edge cluster.'
    )
    gkeCluster: Optional[GkeCluster] = Field(
        None, description='Optional. Specific information for a GKE-on-GCP cluster.'
    )
    kubernetesMetadata: Optional[KubernetesMetadata] = Field(
        None, description='Output only. Useful Kubernetes-specific metadata.'
    )
    kubernetesResource: Optional[KubernetesResource] = Field(
        None,
        description='Optional. The in-cluster Kubernetes Resources that should be applied for a correctly registered cluster, in the steady state. These resources: * Ensure that the cluster is exclusively registered to one and only one Hub Membership. * Propagate Workload Pool Information available in the Membership Authority field. * Ensure proper initial configuration of default Hub Features.',
    )
    multiCloudCluster: Optional[MultiCloudCluster] = Field(
        None,
        description='Optional. Specific information for a GKE Multi-Cloud cluster.',
    )
    onPremCluster: Optional[OnPremCluster] = Field(
        None,
        description='Optional. Specific information for a GKE On-Prem cluster. An onprem user-cluster who has no resourceLink is not allowed to use this field, it should have a nil "type" instead.',
    )


class Policy(BaseModel):
    auditConfigs: Optional[List[AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class SetIamPolicyRequest(BaseModel):
    policy: Optional[Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`',
    )


class Membership(BaseModel):
    authority: Optional[Authority] = Field(
        None,
        description='Optional. How to identify workloads from this Membership. See the documentation on Workload Identity for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. When the Membership was created.'
    )
    deleteTime: Optional[str] = Field(
        None, description='Output only. When the Membership was deleted.'
    )
    description: Optional[str] = Field(
        None,
        description='Optional. Description of this membership, limited to 63 characters. Must match the regex: `a-zA-Z0-9*`',
    )
    endpoint: Optional[MembershipEndpoint] = Field(
        None, description='Optional. Endpoint information to reach this member.'
    )
    externalId: Optional[str] = Field(
        None,
        description='Optional. An externally-generated and managed ID for this Membership. This ID may be modified after creation, but this is not recommended. For GKE clusters, external_id is managed by the Hub API and updates will be ignored. The ID must match the regex: `a-zA-Z0-9*` If this Membership represents a Kubernetes cluster, this value should be set to the UID of the `kube-system` namespace object.',
    )
    infrastructureType: Optional[InfrastructureType] = Field(
        None,
        description='Optional. The infrastructure type this Membership is running on.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Optional. GCP labels for this membership.'
    )
    lastConnectionTime: Optional[str] = Field(
        None,
        description='Output only. For clusters using Connect, the timestamp of the most recent connection established with Google Cloud. This time is updated every several minutes, not continuously. For clusters that do not use GKE Connect, or that have never connected successfully, this field will be unset.',
    )
    monitoringConfig: Optional[MonitoringConfig] = Field(
        None,
        description='Optional. The monitoring config information for this membership.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The full, unique name of this Membership resource in the format `projects/*/locations/*/memberships/{membership_id}`, set during creation. `membership_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.',
    )
    state: Optional[MembershipState] = Field(
        None, description='Output only. State of the Membership resource.'
    )
    uniqueId: Optional[str] = Field(
        None,
        description='Output only. Google-generated UUID for this resource. This is unique across all Membership resources. If a Membership resource is deleted and another resource with the same name is created, it gets a different unique_id.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. When the Membership was last updated.'
    )


class ListMembershipsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to request the next page of resources from the `ListMemberships` method. The value of an empty string means that there are no more resources to return.',
    )
    resources: Optional[List[Membership]] = Field(
        None, description='The list of matching Memberships.'
    )
    unreachable: Optional[List[str]] = Field(
        None,
        description='List of locations that could not be reached while fetching this list.',
    )
